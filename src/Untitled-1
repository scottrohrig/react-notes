{"notes":[
  {"noteId":"6","noteTitle":"Goodbye CDNs","noteSubtitle":"Properly setting up a React project","subsections":[],"noteLabel":"","noteBody":"You may simply use create-react-app from command line\n\nnpx create-react-app app-name --template cra-template-pwa"},{"noteId":"5","noteTitle":"Info Site","noteSubtitle":"Why React? It's Composable!","subsections":[],"noteLabel":"","noteBody":"Using small components allow us to have web pages that are a lot more maintainable and flexible \n\neg, the Statue of David (a whole) and legos (parts) OR a bootstrap Navbar\n\n[1] - className is used instead of class\n\n#Challenge \nCreate a custom react component called 'MainContent' that returns a simple h1 tag saying \"I'm learning React!\" and render it under the navbar.\n\nfunction MainContent() {\n  return (\n    <h1>I'm learning React!</h1>\n  )\n}\n\nReactDom.render(\n  <div>\n    <Navbar />\n    <MainContent />\n  </div>\n , document.getElementById('root')\n)\n\nChallenge:\n\nCreate a navbar in JSX:\n - use the semantic `nav` element as the parent wrapper\n - Have an h1 element with the brand name of your \"website\"\n - Insert an unordered list for the other nave elements\n     - Inside the `ul` have 3 `li`s for 'menu', 'about', 'contact'\n - no need to style \n\n```js\nconst navbar = (\n  <nav>\n    <ul>\n      <li>Menu</li>\n      <li>About</li>\n      <li>Contact</li>\n    </ul>\n  </nav>\n)\n\nReactDom.render( navbar, document.getElementById('root') );\n```"},{"noteId":"4","noteTitle":"First React","noteSubtitle":"A simple HTML page in React to learn the foundations","subsections":[],"noteLabel":"","noteBody":"Setting up the project\n\nStarting out the easy way, you can simply import React into a project using a CDN. Add the following in the head:\n\n<script crossorigin src=\"https://unpkg.com/react-dom@17/umd/react-dom.development.js\"></script>\n<script src=\"https://unpkg.com/babel-standalone@6/babel.min.js\"></script>\n\nThen add this to the body:\n\n<script src=\"index.js\" type=\"text/babel\"></script>\n\nFrom here we have access to ReactDom and can render elements from the render() method.\n\nInside the body, we can add our base root element, that the ReactDom will be able to grab hold of. Add the following inside the body of index.html\n\n<div id='root'></div>\n\nNow in index.js we can render our first launch \"hello react\". Add this:\n\nReactDom.render(<h1>Hello, React</h1>, document.getElementById('root')\n\n⬆ MEMORIZE THIS ⬆\n\nEverything within the first argument of the render method is what will be passed to the body of your index.html file.\n\nPractice this 2 times\n• rewrite the line from memory\n• rewrite the line minus the h1 tag. add a div with a ul and 2 li tags\n\nThere you have it! Your first React page"},{"noteId":"3","noteTitle":"Multi-line Notes","noteSubtitle":"Will line breaks display properly?","subsections":[],"noteLabel":"","noteBody":"This is the first paragraph! Here is a lot of text to test if line breaks render the way I expect in the saved note.\n\nHere's the second paragraph. Just checking if the two returns will break up or will they bunch together like to monkeys in the trees of the cold Japanese winters.\n\nThe third paragraph should be a good one, but I'm running out of ideas here. Please praise my effort anyway! I want cookies :)"},{"noteId":"2","noteTitle":"Hello Notes","noteBody":"Just testing to see if notes stack properly..."},{"noteId":"1","noteTitle":"Hello World!","noteSubtitle":"Hello React","noteLabel":"Hello Note","noteBody":"This is the first note in the batch. Let's see if it gets to localStorage."}
  ]}

  {"notes":[{"noteId":4,"noteTitle":"Goodbye CDNs","noteSubtitle":"Properly setting up a React project","subsections":[],"noteLabel":"","noteBody":"You may simply use create-react-app from command line\n\nnpx create-react-app app-name --template cra-template-pwa"},{"noteId":"3","noteTitle":"Info Site","noteSubtitle":"Why React? It's Composable!","subsections":[],"noteLabel":"","noteBody":"Using small components allow us to have web pages that are a lot more maintainable and flexible \n\neg, the Statue of David (a whole) and legos (parts) OR a bootstrap Navbar\n\n[1] - className is used instead of class\n\n#Challenge \nCreate a custom react component called 'MainContent' that returns a simple h1 tag saying \"I'm learning React!\" and render it under the navbar.\n\nfunction MainContent() {\n  return (\n    <h1>I'm learning React!</h1>\n  )\n}\n\nReactDom.render(\n  <div>\n    <Navbar />\n    <MainContent />\n  </div>\n , document.getElementById('root')\n)\n\nChallenge:\n\nCreate a navbar in JSX:\n - use the semantic `nav` element as the parent wrapper\n - Have an h1 element with the brand name of your \"website\"\n - Insert an unordered list for the other nave elements\n     - Inside the `ul` have 3 `li`s for 'menu', 'about', 'contact'\n - no need to style \n\n```js\nconst navbar = (\n  <nav>\n    <ul>\n      <li>Menu</li>\n      <li>About</li>\n      <li>Contact</li>\n    </ul>\n  </nav>\n)\n\nReactDom.render( navbar, document.getElementById('root') );\n```"},{"noteId":"1","noteTitle":"Hello World!","noteSubtitle":"Hello React","noteLabel":"Hello Note","noteBody":"This is the first note in the batch. Let's see if it gets to localStorage."},{"noteId":"2","noteTitle":"Hello Notes","noteBody":"Just testing to see if notes stack properly..."},{"noteId":"","noteTitle":"Multi-line Notes","noteSubtitle":"Will line breaks display properly?","subsections":[],"noteLabel":"","noteBody":"This is the first paragraph! Here is a lot of text to test if line breaks render the way I expect in the saved note.\n\nHere's the second paragraph. Just checking if the two returns will break up or will they bunch together like to monkeys in the trees of the cold Japanese winters.\n\nThe third paragraph should be a good one, but I'm running out of ideas here. Please praise my effort anyway! I want cookies :)"},{"noteId":"","noteTitle":"First React","noteSubtitle":"A simple HTML page in React to learn the foundations","subsections":[],"noteLabel":"","noteBody":"Setting up the project\n\nStarting out the easy way, you can simply import React into a project using a CDN. Add the following in the head:\n\n<script crossorigin src=\"https://unpkg.com/react-dom@17/umd/react-dom.development.js\"></script>\n<script src=\"https://unpkg.com/babel-standalone@6/babel.min.js\"></script>\n\nThen add this to the body:\n\n<script src=\"index.js\" type=\"text/babel\"></script>\n\nFrom here we have access to ReactDom and can render elements from the render() method.\n\nInside the body, we can add our base root element, that the ReactDom will be able to grab hold of. Add the following inside the body of index.html\n\n<div id='root'></div>\n\nNow in index.js we can render our first launch \"hello react\". Add this:\n\nReactDom.render(<h1>Hello, React</h1>, document.getElementById('root')\n\n⬆ MEMORIZE THIS ⬆\n\nEverything within the first argument of the render method is what will be passed to the body of your index.html file.\n\nPractice this 2 times\n• rewrite the line from memory\n• rewrite the line minus the h1 tag. add a div with a ul and 2 li tags\n\nThere you have it! Your first React page"}]}